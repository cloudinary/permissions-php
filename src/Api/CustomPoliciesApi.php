<?php
/**
 * CustomPoliciesApi
 * PHP version 8.1
 *
 * @package  Cloudinary\Permissions
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cloudinary Account Permissions API
 *
 * Accounts with Permissions API access can manage custom permission policies. These policies assign permissions for a principal, allowing the principal to perform a specific action on a designated resource within a particular scope (your account or a product environment).   Refer to the [Permissions API guide](permissions_api_guide) for instructions on what to specify in the `policy_statement` to control Cloudinary activities, and to the Cedar schema, which defines the possible values for principals, actions, and resources.  The API uses **Basic Authentication** over HTTPS. Your **Provisioning Key** and **Provisioning Secret** are used for the authentication. These credentials (as well as your ACCOUNT_ID) are located in the [Cloudinary Console](https://console.cloudinary.com/pm) under **Settings > Account > Provisioning API Access**.  The Permissions API has dedicated SDKs for the following languages:  * JavaScript * PHP * Java
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support@cloudinary.com
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cloudinary\Permissions\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use Cloudinary\Permissions\ApiException;
use Cloudinary\Permissions\Configuration;
use Cloudinary\Permissions\HeaderSelector;
use Cloudinary\Permissions\ObjectSerializer;

/**
 * CustomPoliciesApi Class Doc Comment
 *
 * @package  Cloudinary\Permissions
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomPoliciesApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createCustomPolicy' => [
            'application/json',
        ],
        'deleteCustomPolicy' => [
            'application/json',
        ],
        'getCustomPolicies' => [
            'application/json',
        ],
        'getCustomPolicy' => [
            'application/json',
        ],
        'updateCustomPolicy' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation createCustomPolicy
     *
     * Create custom policy
     *
     * @param  \Cloudinary\Permissions\Model\CreateCustomPolicy $createCustomPolicy Policy details. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCustomPolicy'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cloudinary\Permissions\Model\CustomPolicyResponse|\Cloudinary\Permissions\Model\ErrorResponse|\Cloudinary\Permissions\Model\ErrorResponse|\Cloudinary\Permissions\Model\ErrorResponse|\Cloudinary\Permissions\Model\ErrorResponse
     */
    public function createCustomPolicy(
        \Cloudinary\Permissions\Model\CreateCustomPolicy $createCustomPolicy,
        string $contentType = self::contentTypes['createCustomPolicy'][0]
    ): \Cloudinary\Permissions\Model\CustomPolicyResponse
    {
        list($response) = $this->createCustomPolicyWithHttpInfo($createCustomPolicy, $contentType);
        return $response;
    }

    /**
     * Operation createCustomPolicyWithHttpInfo
     *
     * Create custom policy
     *
     * @param  \Cloudinary\Permissions\Model\CreateCustomPolicy $createCustomPolicy Policy details. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCustomPolicy'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cloudinary\Permissions\Model\CustomPolicyResponse|\Cloudinary\Permissions\Model\ErrorResponse|\Cloudinary\Permissions\Model\ErrorResponse|\Cloudinary\Permissions\Model\ErrorResponse|\Cloudinary\Permissions\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCustomPolicyWithHttpInfo(
        \Cloudinary\Permissions\Model\CreateCustomPolicy $createCustomPolicy,
        string $contentType = self::contentTypes['createCustomPolicy'][0]
    ): array
    {
        $request = $this->createCustomPolicyRequest($createCustomPolicy, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Cloudinary\Permissions\Model\CustomPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Permissions\Model\CustomPolicyResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Permissions\Model\CustomPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cloudinary\Permissions\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Permissions\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Permissions\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cloudinary\Permissions\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Permissions\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Permissions\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Cloudinary\Permissions\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Permissions\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Permissions\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cloudinary\Permissions\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Permissions\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Permissions\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cloudinary\Permissions\Model\CustomPolicyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Permissions\Model\CustomPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Permissions\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Permissions\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Permissions\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Permissions\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCustomPolicyAsync
     *
     * Create custom policy
     *
     * @param  \Cloudinary\Permissions\Model\CreateCustomPolicy $createCustomPolicy Policy details. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCustomPolicy'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createCustomPolicyAsync(
        \Cloudinary\Permissions\Model\CreateCustomPolicy $createCustomPolicy,
        string $contentType = self::contentTypes['createCustomPolicy'][0]
    ): PromiseInterface
    {
        return $this->createCustomPolicyAsyncWithHttpInfo($createCustomPolicy, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCustomPolicyAsyncWithHttpInfo
     *
     * Create custom policy
     *
     * @param  \Cloudinary\Permissions\Model\CreateCustomPolicy $createCustomPolicy Policy details. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCustomPolicy'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createCustomPolicyAsyncWithHttpInfo(
        $createCustomPolicy,
        string $contentType = self::contentTypes['createCustomPolicy'][0]
    ): PromiseInterface
    {
        $returnType = '\Cloudinary\Permissions\Model\CustomPolicyResponse';
        $request = $this->createCustomPolicyRequest($createCustomPolicy, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCustomPolicy'
     *
     * @param  \Cloudinary\Permissions\Model\CreateCustomPolicy $createCustomPolicy Policy details. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCustomPolicy'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCustomPolicyRequest(
        $createCustomPolicy,
        string $contentType = self::contentTypes['createCustomPolicy'][0]
    ): Request
    {

        // verify the required parameter 'createCustomPolicy' is set
        if ($createCustomPolicy === null || (is_array($createCustomPolicy) && count($createCustomPolicy) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $createCustomPolicy when calling createCustomPolicy'
            );
        }


        $resourcePath = '/policies/custom';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createCustomPolicy)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createCustomPolicy));
            } else {
                $httpBody = $createCustomPolicy;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCustomPolicy
     *
     * Delete custom policy
     *
     * @param  string $policyId A unique identifier for the custom permission policy. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCustomPolicy'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteCustomPolicy(
        string $policyId,
        string $contentType = self::contentTypes['deleteCustomPolicy'][0]
    ): void
    {
        $this->deleteCustomPolicyWithHttpInfo($policyId, $contentType);
    }

    /**
     * Operation deleteCustomPolicyWithHttpInfo
     *
     * Delete custom policy
     *
     * @param  string $policyId A unique identifier for the custom permission policy. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCustomPolicy'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCustomPolicyWithHttpInfo(
        string $policyId,
        string $contentType = self::contentTypes['deleteCustomPolicy'][0]
    ): array
    {
        $request = $this->deleteCustomPolicyRequest($policyId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Permissions\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Permissions\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCustomPolicyAsync
     *
     * Delete custom policy
     *
     * @param  string $policyId A unique identifier for the custom permission policy. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCustomPolicy'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteCustomPolicyAsync(
        string $policyId,
        string $contentType = self::contentTypes['deleteCustomPolicy'][0]
    ): PromiseInterface
    {
        return $this->deleteCustomPolicyAsyncWithHttpInfo($policyId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCustomPolicyAsyncWithHttpInfo
     *
     * Delete custom policy
     *
     * @param  string $policyId A unique identifier for the custom permission policy. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCustomPolicy'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteCustomPolicyAsyncWithHttpInfo(
        $policyId,
        string $contentType = self::contentTypes['deleteCustomPolicy'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteCustomPolicyRequest($policyId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCustomPolicy'
     *
     * @param  string $policyId A unique identifier for the custom permission policy. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCustomPolicy'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCustomPolicyRequest(
        $policyId,
        string $contentType = self::contentTypes['deleteCustomPolicy'][0]
    ): Request
    {

        // verify the required parameter 'policyId' is set
        if ($policyId === null || (is_array($policyId) && count($policyId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $policyId when calling deleteCustomPolicy'
            );
        }


        $resourcePath = '/policies/custom/{policy_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($policyId !== null) {
            $resourcePath = str_replace(
                '{' . 'policy_id' . '}',
                ObjectSerializer::toPathValue($policyId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomPolicies
     *
     * Get custom policies
     *
     * @param  string|null $scopeType Specifies the level for retrieving policies, either at the account level or within product environments. (optional)
     * @param  string|null $scopeId The ID of a specific product environment where the policy is applied. This parameter is only relevant if &#x60;scope_type&#x60; is \&quot;prodenv\&quot;. Find your product environment IDs in the [Product Environments](https://console.cloudinary.com/settings/product-environments) page of the Console Settings. - &lt;product_environment_id&gt; (optional)
     * @param  bool|null $enabled Filter policies by enabled status (true/false). (optional, default to true)
     * @param  string|null $cursor A pagination cursor for fetching subsequent results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomPolicies'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cloudinary\Permissions\Model\CustomPoliciesResponse|\Cloudinary\Permissions\Model\ErrorResponse|\Cloudinary\Permissions\Model\ErrorResponse
     */
    public function getCustomPolicies(
        ?string $scopeType = null,
        ?string $scopeId = null,
        ?bool $enabled = true,
        ?string $cursor = null,
        string $contentType = self::contentTypes['getCustomPolicies'][0]
    ): \Cloudinary\Permissions\Model\CustomPoliciesResponse
    {
        list($response) = $this->getCustomPoliciesWithHttpInfo($scopeType, $scopeId, $enabled, $cursor, $contentType);
        return $response;
    }

    /**
     * Operation getCustomPoliciesWithHttpInfo
     *
     * Get custom policies
     *
     * @param  string|null $scopeType Specifies the level for retrieving policies, either at the account level or within product environments. (optional)
     * @param  string|null $scopeId The ID of a specific product environment where the policy is applied. This parameter is only relevant if &#x60;scope_type&#x60; is \&quot;prodenv\&quot;. Find your product environment IDs in the [Product Environments](https://console.cloudinary.com/settings/product-environments) page of the Console Settings. - &lt;product_environment_id&gt; (optional)
     * @param  bool|null $enabled Filter policies by enabled status (true/false). (optional, default to true)
     * @param  string|null $cursor A pagination cursor for fetching subsequent results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomPolicies'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cloudinary\Permissions\Model\CustomPoliciesResponse|\Cloudinary\Permissions\Model\ErrorResponse|\Cloudinary\Permissions\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomPoliciesWithHttpInfo(
        ?string $scopeType = null,
        ?string $scopeId = null,
        ?bool $enabled = true,
        ?string $cursor = null,
        string $contentType = self::contentTypes['getCustomPolicies'][0]
    ): array
    {
        $request = $this->getCustomPoliciesRequest($scopeType, $scopeId, $enabled, $cursor, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cloudinary\Permissions\Model\CustomPoliciesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Permissions\Model\CustomPoliciesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Permissions\Model\CustomPoliciesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cloudinary\Permissions\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Permissions\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Permissions\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cloudinary\Permissions\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Permissions\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Permissions\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cloudinary\Permissions\Model\CustomPoliciesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Permissions\Model\CustomPoliciesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Permissions\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Permissions\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomPoliciesAsync
     *
     * Get custom policies
     *
     * @param  string|null $scopeType Specifies the level for retrieving policies, either at the account level or within product environments. (optional)
     * @param  string|null $scopeId The ID of a specific product environment where the policy is applied. This parameter is only relevant if &#x60;scope_type&#x60; is \&quot;prodenv\&quot;. Find your product environment IDs in the [Product Environments](https://console.cloudinary.com/settings/product-environments) page of the Console Settings. - &lt;product_environment_id&gt; (optional)
     * @param  bool|null $enabled Filter policies by enabled status (true/false). (optional, default to true)
     * @param  string|null $cursor A pagination cursor for fetching subsequent results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomPolicies'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCustomPoliciesAsync(
        ?string $scopeType = null,
        ?string $scopeId = null,
        ?bool $enabled = true,
        ?string $cursor = null,
        string $contentType = self::contentTypes['getCustomPolicies'][0]
    ): PromiseInterface
    {
        return $this->getCustomPoliciesAsyncWithHttpInfo($scopeType, $scopeId, $enabled, $cursor, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomPoliciesAsyncWithHttpInfo
     *
     * Get custom policies
     *
     * @param  string|null $scopeType Specifies the level for retrieving policies, either at the account level or within product environments. (optional)
     * @param  string|null $scopeId The ID of a specific product environment where the policy is applied. This parameter is only relevant if &#x60;scope_type&#x60; is \&quot;prodenv\&quot;. Find your product environment IDs in the [Product Environments](https://console.cloudinary.com/settings/product-environments) page of the Console Settings. - &lt;product_environment_id&gt; (optional)
     * @param  bool|null $enabled Filter policies by enabled status (true/false). (optional, default to true)
     * @param  string|null $cursor A pagination cursor for fetching subsequent results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomPolicies'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCustomPoliciesAsyncWithHttpInfo(
        $scopeType = null,
        $scopeId = null,
        $enabled = true,
        $cursor = null,
        string $contentType = self::contentTypes['getCustomPolicies'][0]
    ): PromiseInterface
    {
        $returnType = '\Cloudinary\Permissions\Model\CustomPoliciesResponse';
        $request = $this->getCustomPoliciesRequest($scopeType, $scopeId, $enabled, $cursor, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomPolicies'
     *
     * @param  string|null $scopeType Specifies the level for retrieving policies, either at the account level or within product environments. (optional)
     * @param  string|null $scopeId The ID of a specific product environment where the policy is applied. This parameter is only relevant if &#x60;scope_type&#x60; is \&quot;prodenv\&quot;. Find your product environment IDs in the [Product Environments](https://console.cloudinary.com/settings/product-environments) page of the Console Settings. - &lt;product_environment_id&gt; (optional)
     * @param  bool|null $enabled Filter policies by enabled status (true/false). (optional, default to true)
     * @param  string|null $cursor A pagination cursor for fetching subsequent results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomPolicies'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomPoliciesRequest(
        $scopeType = null,
        $scopeId = null,
        $enabled = true,
        $cursor = null,
        string $contentType = self::contentTypes['getCustomPolicies'][0]
    ): Request
    {






        $resourcePath = '/policies/custom';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scopeType,
            'scope_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scopeId,
            'scope_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enabled,
            'enabled', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomPolicy
     *
     * Get custom policy
     *
     * @param  string $policyId A unique identifier for the custom permission policy. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomPolicy'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cloudinary\Permissions\Model\CustomPolicyResponse|\Cloudinary\Permissions\Model\ErrorResponse|\Cloudinary\Permissions\Model\ErrorResponse
     */
    public function getCustomPolicy(
        string $policyId,
        string $contentType = self::contentTypes['getCustomPolicy'][0]
    ): \Cloudinary\Permissions\Model\CustomPolicyResponse
    {
        list($response) = $this->getCustomPolicyWithHttpInfo($policyId, $contentType);
        return $response;
    }

    /**
     * Operation getCustomPolicyWithHttpInfo
     *
     * Get custom policy
     *
     * @param  string $policyId A unique identifier for the custom permission policy. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomPolicy'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cloudinary\Permissions\Model\CustomPolicyResponse|\Cloudinary\Permissions\Model\ErrorResponse|\Cloudinary\Permissions\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomPolicyWithHttpInfo(
        string $policyId,
        string $contentType = self::contentTypes['getCustomPolicy'][0]
    ): array
    {
        $request = $this->getCustomPolicyRequest($policyId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cloudinary\Permissions\Model\CustomPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Permissions\Model\CustomPolicyResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Permissions\Model\CustomPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cloudinary\Permissions\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Permissions\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Permissions\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cloudinary\Permissions\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Permissions\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Permissions\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cloudinary\Permissions\Model\CustomPolicyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Permissions\Model\CustomPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Permissions\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Permissions\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomPolicyAsync
     *
     * Get custom policy
     *
     * @param  string $policyId A unique identifier for the custom permission policy. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomPolicy'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCustomPolicyAsync(
        string $policyId,
        string $contentType = self::contentTypes['getCustomPolicy'][0]
    ): PromiseInterface
    {
        return $this->getCustomPolicyAsyncWithHttpInfo($policyId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomPolicyAsyncWithHttpInfo
     *
     * Get custom policy
     *
     * @param  string $policyId A unique identifier for the custom permission policy. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomPolicy'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCustomPolicyAsyncWithHttpInfo(
        $policyId,
        string $contentType = self::contentTypes['getCustomPolicy'][0]
    ): PromiseInterface
    {
        $returnType = '\Cloudinary\Permissions\Model\CustomPolicyResponse';
        $request = $this->getCustomPolicyRequest($policyId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomPolicy'
     *
     * @param  string $policyId A unique identifier for the custom permission policy. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomPolicy'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomPolicyRequest(
        $policyId,
        string $contentType = self::contentTypes['getCustomPolicy'][0]
    ): Request
    {

        // verify the required parameter 'policyId' is set
        if ($policyId === null || (is_array($policyId) && count($policyId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $policyId when calling getCustomPolicy'
            );
        }


        $resourcePath = '/policies/custom/{policy_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($policyId !== null) {
            $resourcePath = str_replace(
                '{' . 'policy_id' . '}',
                ObjectSerializer::toPathValue($policyId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomPolicy
     *
     * Update custom policy
     *
     * @param  string $policyId A unique identifier for the custom permission policy. (required)
     * @param  \Cloudinary\Permissions\Model\UpdateCustomPolicy $updateCustomPolicy Policy details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCustomPolicy'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cloudinary\Permissions\Model\CustomPolicyResponse|\Cloudinary\Permissions\Model\ErrorResponse|\Cloudinary\Permissions\Model\ErrorResponse|\Cloudinary\Permissions\Model\ErrorResponse|\Cloudinary\Permissions\Model\ErrorResponse|\Cloudinary\Permissions\Model\ErrorResponse
     */
    public function updateCustomPolicy(
        string $policyId,
        \Cloudinary\Permissions\Model\UpdateCustomPolicy $updateCustomPolicy,
        string $contentType = self::contentTypes['updateCustomPolicy'][0]
    ): \Cloudinary\Permissions\Model\CustomPolicyResponse
    {
        list($response) = $this->updateCustomPolicyWithHttpInfo($policyId, $updateCustomPolicy, $contentType);
        return $response;
    }

    /**
     * Operation updateCustomPolicyWithHttpInfo
     *
     * Update custom policy
     *
     * @param  string $policyId A unique identifier for the custom permission policy. (required)
     * @param  \Cloudinary\Permissions\Model\UpdateCustomPolicy $updateCustomPolicy Policy details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCustomPolicy'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cloudinary\Permissions\Model\CustomPolicyResponse|\Cloudinary\Permissions\Model\ErrorResponse|\Cloudinary\Permissions\Model\ErrorResponse|\Cloudinary\Permissions\Model\ErrorResponse|\Cloudinary\Permissions\Model\ErrorResponse|\Cloudinary\Permissions\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomPolicyWithHttpInfo(
        string $policyId,
        \Cloudinary\Permissions\Model\UpdateCustomPolicy $updateCustomPolicy,
        string $contentType = self::contentTypes['updateCustomPolicy'][0]
    ): array
    {
        $request = $this->updateCustomPolicyRequest($policyId, $updateCustomPolicy, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cloudinary\Permissions\Model\CustomPolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Permissions\Model\CustomPolicyResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Permissions\Model\CustomPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cloudinary\Permissions\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Permissions\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Permissions\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cloudinary\Permissions\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Permissions\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Permissions\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cloudinary\Permissions\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Permissions\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Permissions\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Cloudinary\Permissions\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Permissions\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Permissions\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cloudinary\Permissions\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Permissions\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Permissions\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cloudinary\Permissions\Model\CustomPolicyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Permissions\Model\CustomPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Permissions\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Permissions\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Permissions\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Permissions\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Permissions\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomPolicyAsync
     *
     * Update custom policy
     *
     * @param  string $policyId A unique identifier for the custom permission policy. (required)
     * @param  \Cloudinary\Permissions\Model\UpdateCustomPolicy $updateCustomPolicy Policy details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCustomPolicy'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateCustomPolicyAsync(
        string $policyId,
        \Cloudinary\Permissions\Model\UpdateCustomPolicy $updateCustomPolicy,
        string $contentType = self::contentTypes['updateCustomPolicy'][0]
    ): PromiseInterface
    {
        return $this->updateCustomPolicyAsyncWithHttpInfo($policyId, $updateCustomPolicy, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomPolicyAsyncWithHttpInfo
     *
     * Update custom policy
     *
     * @param  string $policyId A unique identifier for the custom permission policy. (required)
     * @param  \Cloudinary\Permissions\Model\UpdateCustomPolicy $updateCustomPolicy Policy details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCustomPolicy'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateCustomPolicyAsyncWithHttpInfo(
        $policyId,
        $updateCustomPolicy,
        string $contentType = self::contentTypes['updateCustomPolicy'][0]
    ): PromiseInterface
    {
        $returnType = '\Cloudinary\Permissions\Model\CustomPolicyResponse';
        $request = $this->updateCustomPolicyRequest($policyId, $updateCustomPolicy, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomPolicy'
     *
     * @param  string $policyId A unique identifier for the custom permission policy. (required)
     * @param  \Cloudinary\Permissions\Model\UpdateCustomPolicy $updateCustomPolicy Policy details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCustomPolicy'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCustomPolicyRequest(
        $policyId,
        $updateCustomPolicy,
        string $contentType = self::contentTypes['updateCustomPolicy'][0]
    ): Request
    {

        // verify the required parameter 'policyId' is set
        if ($policyId === null || (is_array($policyId) && count($policyId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $policyId when calling updateCustomPolicy'
            );
        }

        // verify the required parameter 'updateCustomPolicy' is set
        if ($updateCustomPolicy === null || (is_array($updateCustomPolicy) && count($updateCustomPolicy) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $updateCustomPolicy when calling updateCustomPolicy'
            );
        }


        $resourcePath = '/policies/custom/{policy_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($policyId !== null) {
            $resourcePath = str_replace(
                '{' . 'policy_id' . '}',
                ObjectSerializer::toPathValue($policyId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($updateCustomPolicy)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($updateCustomPolicy));
            } else {
                $httpBody = $updateCustomPolicy;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
